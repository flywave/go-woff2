
include_directories(${FLYWAVE_INCLUDE_DIRS})

FILE( GLOB woff2_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/woff2_api.cc )
FILE( GLOB woff2_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.hh ${CMAKE_CURRENT_SOURCE_DIR}/*.h )

ADD_LIBRARY(c_woff2 STATIC
            ${woff2_HEADER_FILES}
            ${woff2_SOURCE_FILES}
          )

TARGET_INCLUDE_DIRECTORIES(c_woff2 PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>)

SOURCE_GROUP("src" FILES ${woff2_SOURCE_FILES})
SOURCE_GROUP("include" FILES ${woff2_HEADER_FILES})

SET_TARGET_PROPERTIES(c_woff2
                    PROPERTIES PUBLIC_HEADER "${headers}")

SET(test_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/woff2_test.cc)
SOURCE_GROUP("src" FILES ${test_SOURCE_FILES})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

ADD_EXECUTABLE(test ${test_SOURCE_FILES})

IF(FLYWAVE_ENABLE_SOLUTION_FOLDERS)
  SET_TARGET_PROPERTIES(test PROPERTIES FOLDER tests)
ENDIF(FLYWAVE_ENABLE_SOLUTION_FOLDERS)

IF(UNIX AND NOT APPLE)
TARGET_LINK_LIBRARIES(test -Wl,--start-group ${FLYWAVE_LIBRARY_DEPES} c_woff2 -Wl,--end-group)
ELSEIF(MINGW)
TARGET_LINK_LIBRARIES(test -Wl,--start-group ${FLYWAVE_LIBRARY_DEPES} c_woff2 -Wl,--end-group)
ELSE()
TARGET_LINK_LIBRARIES(test ${FLYWAVE_LIBRARY_DEPES} c_woff2)
ENDIF()